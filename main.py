import asyncio
import os
from google.cloud import firestore

from functions_framework import http
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore
DB = firestore.Client()

# === ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–∏—Ñ–æ–≤ ===
CHANNEL_ID = "-1002903538672"

# === –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ===
(
    STEP_TYPE,
    STEP_ENGINE,
    STEP_FEATURES,
    STEP_TIMELINE,
    STEP_BUDGET,
    STEP_BUSINESS_NICHE,
    STEP_COMPANY_INFO,
    STEP_INSPIRATION,
    STEP_AVAILABLE_MATERIALS,
    STEP_SEO_KEYWORDS,
    STEP_COMPETITORS,
    STEP_PRODUCT_PROBLEM,
    STEP_SITE_GOALS,
    STEP_SITE_STYLE,
    STEP_SITE_STRUCTURE,
    STEP_EXTRA_INFO,
    STEP_CONTACT,
) = range(17)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_nav_keyboard(current_step):
    buttons = []
    row = []
    if current_step > STEP_TYPE:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"))
    if current_step < STEP_CONTACT:
        row.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next"))
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons) if buttons else None

def get_new_brief_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–∏—Ñ", callback_data="start_brief")]
    ])

def get_type_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–∏–∑–∏—Ç–∫–∞", callback_data="step1:–í–∏–∑–∏—Ç–∫–∞")],
        [InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥", callback_data="step1:–õ–µ–Ω–¥–∏–Ω–≥")],
        [InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data="step1:–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω")],
        [InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", callback_data="step1:–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç")],
        [InlineKeyboardButton("–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç", callback_data="step1:–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç")],
        [InlineKeyboardButton("SMM-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="step1:SMM-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")],
        [InlineKeyboardButton("Landing page —Å —Ñ–æ—Ä–º–æ–π", callback_data="step1:Landing page —Å —Ñ–æ—Ä–º–æ–π")],
    ])

def get_engine_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Tilda (–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö)", callback_data="step2:Tilda")],
        [InlineKeyboardButton("WordPress (–¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö/–∫—Ä—É–ø–Ω—ã—Ö)", callback_data="step2:WordPress")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π –¥–≤–∏–∂–æ–∫", callback_data="step2:–î—Ä—É–≥–æ–π")],
    ])

def get_timeline_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–¥–æ –±—ã–ª–æ –≤—á–µ—Ä–∞ (1‚Äì2 –¥–Ω—è)", callback_data="step3:1-2 –¥–Ω—è")],
        [InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ –≥–æ—Ä–∏—Ç (1‚Äì2 –Ω–µ–¥–µ–ª–∏)", callback_data="step3:1-2 –Ω–µ–¥–µ–ª–∏")],
        [InlineKeyboardButton("–ú–æ–∂–Ω–æ –Ω–µ —Å–ø–µ—à–∞ (1‚Äì2 –º–µ—Å—è—Ü–∞)", callback_data="step3:1-2 –º–µ—Å—è—Ü–∞")],
    ])

def get_budget_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç 200$", callback_data="step4:–æ—Ç 200$")],
        [InlineKeyboardButton("500$‚Äì700$", callback_data="step4:500$‚Äì700$")],
        [InlineKeyboardButton("1000$", callback_data="step4:1000$")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 3000$", callback_data="step4:–±–æ–ª–µ–µ 3000$")],
    ])

def get_goals_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–µ", callback_data="step8:–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–µ")],
        [InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="step8:–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏")],
        [InlineKeyboardButton("–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é", callback_data="step8:–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é")],
        [InlineKeyboardButton("–£–≤–µ–ª–∏—á–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å", callback_data="step8:–£–≤–µ–ª–∏—á–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="step8:–î—Ä—É–≥–æ–µ")],
    ])

# –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–π
FEATURES_MAP = {
    "ai": "–ß–∞—Ç-–±–æ—Ç —Å –ò–ò",
    "payment": "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞",
    "ads": "–†–µ–∫–ª–∞–º–∞ –≤ Google",
    "seo": "SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
    "logo": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞",
}

def get_features_keyboard(selected=None):
    if selected is None:
        selected = []
    buttons = []
    for key, label in FEATURES_MAP.items():
        status = "‚úÖ" if key in selected else "‚¨úÔ∏è"
        buttons.append([InlineKeyboardButton(f"{status} {label}", callback_data=f"feature:{key}")])
    buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="features_done")])
    return InlineKeyboardMarkup(buttons)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Cloud Functions ===
@http
def telegram_bot(request):
    return asyncio.run(handle_request(request))


async def handle_request(request):
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        print("ERROR: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return "No token", 500

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    if request.method == "GET":
        webhook_url = f"https://{request.host}/telegram_bot"
        await app.bot.set_webhook(webhook_url)
        return "Webhook set", 200

    if not request.is_json:
        return "Bad Request", 400

    update = Update.de_json(request.get_json(), app.bot)
    async with app:
        await app.process_update(update)

    return "OK", 200


# === –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    doc_ref = DB.collection("users").document(str(user_id))

    try:
        if doc_ref.get().exists:
            doc_ref.delete()
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é: {e}")

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ", callback_data="start_brief")]
    ])
    await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    doc_ref = DB.collection("users").document(str(user_id))

    data = query.data

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        doc = doc_ref.get()
        if doc.exists:
            current_step = doc.to_dict().get("step", STEP_TYPE)
        else:
            current_step = STEP_TYPE

        if data == "start_brief":
            await query.edit_message_text("üîπ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:")
            await query.edit_message_reply_markup(reply_markup=get_type_keyboard())
            doc_ref.set({"step": STEP_TYPE})

        elif data.startswith("step1:"):
            type_ = data.split(":", 1)[1]
            doc_ref.set({"type": type_, "step": STEP_ENGINE})
            await query.edit_message_text("üîπ –®–∞–≥ 2: –ö–∞–∫–æ–π –¥–≤–∏–∂–æ–∫ —Å–∞–π—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
            await query.edit_message_reply_markup(reply_markup=get_engine_keyboard())

        elif data.startswith("step2:"):
            engine = data.split(":", 1)[1]
            doc_ref.update({"engine": engine, "step": STEP_FEATURES, "features": []})
            await query.edit_message_text("üîπ –®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            await query.edit_message_reply_markup(reply_markup=get_features_keyboard())

        elif data.startswith("feature:"):
            feature_key = data.split(":", 1)[1]
            doc = doc_ref.get()
            if not doc.exists:
                return
            data_dict = doc.to_dict()
            selected = data_dict.get("features", [])
            if feature_key in selected:
                selected.remove(feature_key)
            else:
                selected.append(feature_key)
            doc_ref.update({"features": selected})
            await query.edit_message_reply_markup(reply_markup=get_features_keyboard(selected))

        elif data == "features_done":
            doc = doc_ref.get()
            if not doc.exists:
                return
            selected = doc.to_dict().get("features", [])
            if not selected:
                await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é", show_alert=True)
                return
            doc_ref.update({"step": STEP_TIMELINE})
            await query.edit_message_text("üîπ –®–∞–≥ 4: –°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?")
            await query.edit_message_reply_markup(reply_markup=get_timeline_keyboard())

        elif data.startswith("step3:"):
            timeline = data.split(":", 1)[1]
            doc_ref.update({"timeline": timeline, "step": STEP_BUDGET})
            await query.edit_message_text("üîπ –®–∞–≥ 5: –í–∞—à –±—é–¥–∂–µ—Ç?")
            await query.edit_message_reply_markup(reply_markup=get_budget_keyboard())

        elif data.startswith("step4:"):
            budget = data.split(":", 1)[1]
            doc_ref.update({"budget": budget, "step": STEP_BUSINESS_NICHE})
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text(
                "üîπ –®–∞–≥ 6: –ù–∏—à–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=get_nav_keyboard(STEP_BUSINESS_NICHE)
            )

        elif data == "prev":
            # –õ–æ–≥–∏–∫–∞ "–ù–∞–∑–∞–¥"
            if current_step == STEP_ENGINE:
                await query.message.reply_text("üîπ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:", reply_markup=get_type_keyboard())
                doc_ref.update({"step": STEP_TYPE})
            elif current_step == STEP_FEATURES:
                await query.message.reply_text("üîπ –®–∞–≥ 2: –ö–∞–∫–æ–π –¥–≤–∏–∂–æ–∫ —Å–∞–π—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup=get_engine_keyboard())
                doc_ref.update({"step": STEP_ENGINE})
            elif current_step == STEP_TIMELINE:
                await query.message.reply_text("üîπ –®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=get_features_keyboard())
                doc_ref.update({"step": STEP_FEATURES})
            elif current_step == STEP_BUDGET:
                await query.message.reply_text("üîπ –®–∞–≥ 4: –°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?", reply_markup=get_timeline_keyboard())
                doc_ref.update({"step": STEP_TIMELINE})
            elif current_step == STEP_BUSINESS_NICHE:
                await query.message.reply_text("üîπ –®–∞–≥ 5: –í–∞—à –±—é–¥–∂–µ—Ç?", reply_markup=get_budget_keyboard())
                doc_ref.update({"step": STEP_BUDGET})
            else:
                prev_step = max(current_step - 1, STEP_TYPE)
                # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥ –¥—Ä—É–≥–∏–µ —à–∞–≥–∏
                await query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

        elif data == "next":
            # –õ–æ–≥–∏–∫–∞ "–î–∞–ª–µ–µ"
            if current_step == STEP_TYPE and doc.exists and "type" in doc.to_dict():
                await query.message.reply_text("üîπ –®–∞–≥ 2: –ö–∞–∫–æ–π –¥–≤–∏–∂–æ–∫ —Å–∞–π—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup=get_engine_keyboard())
                doc_ref.update({"step": STEP_ENGINE})
            elif current_step == STEP_ENGINE and doc.exists and "engine" in doc.to_dict():
                await query.message.reply_text("üîπ –®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=get_features_keyboard())
                doc_ref.update({"step": STEP_FEATURES})
            elif current_step == STEP_FEATURES and doc.exists and "features" in doc.to_dict():
                await query.message.reply_text("üîπ –®–∞–≥ 4: –°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?", reply_markup=get_timeline_keyboard())
                doc_ref.update({"step": STEP_TIMELINE})
            elif current_step == STEP_TIMELINE and doc.exists and "timeline" in doc.to_dict():
                await query.message.reply_text("üîπ –®–∞–≥ 5: –í–∞—à –±—é–¥–∂–µ—Ç?", reply_markup=get_budget_keyboard())
                doc_ref.update({"step": STEP_BUDGET})
            elif current_step == STEP_BUDGET and doc.exists and "budget" in doc.to_dict():
                await query.message.reply_text(
                    "üîπ –®–∞–≥ 6: –ù–∏—à–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:",
                    reply_markup=get_nav_keyboard(STEP_BUSINESS_NICHE)
                )
                doc_ref.update({"step": STEP_BUSINESS_NICHE})
            else:
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å", show_alert=True)

        elif data.startswith("step8:"):
            goal = data.split(":", 1)[1]
            doc_ref.update({"site_goal": goal, "step": "custom_goal" if goal == "–î—Ä—É–≥–æ–µ" else STEP_SITE_STYLE})
            if goal == "–î—Ä—É–≥–æ–µ":
                await query.message.reply_text("üîπ –£—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–ª—å —Å–∞–π—Ç–∞:")
            else:
                await query.message.reply_text(
                    "üîπ –®–∞–≥ 13: –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å —Å–∞–π—Ç–∞?\n"
                    "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:"
                )

    except Exception as e:
        print(f"[ERROR] button_handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    doc_ref = DB.collection("users").document(str(user_id))
    doc = doc_ref.get()

    if not doc.exists:
        await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    data = doc.to_dict()
    step = data.get("step")

    try:
        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
        if step == STEP_BUSINESS_NICHE:
            doc_ref.update({
                "business_niche": text,
                "step": STEP_COMPANY_INFO
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 7: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "–ò—Å—Ç–æ—Ä–∏—è, –º–∏—Å—Å–∏—è, –∫–æ–º–∞–Ω–¥–∞ ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ:",
                reply_markup=get_nav_keyboard(STEP_COMPANY_INFO)
            )

        elif step == STEP_COMPANY_INFO:
            doc_ref.update({
                "company_info": text,
                "step": STEP_INSPIRATION
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 8: –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ 3-4 —Å—Å—ã–ª–∫–∏:",
                reply_markup=get_nav_keyboard(STEP_INSPIRATION)
            )

        elif step == STEP_INSPIRATION:
            doc_ref.update({
                "inspiration": text,
                "step": STEP_AVAILABLE_MATERIALS
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 9: –ß—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–ª—è —Å–∞–π—Ç–∞?\n"
                "–õ–æ–≥–æ—Ç–∏–ø, —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, —Ç–µ–∫—Å—Ç—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.:",
                reply_markup=get_nav_keyboard(STEP_AVAILABLE_MATERIALS)
            )

        elif step == STEP_AVAILABLE_MATERIALS:
            doc_ref.update({
                "materials": text,
                "step": STEP_SEO_KEYWORDS
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 10: –ü–æ –∫–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–∞–º –≤–∞—Å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ Google?\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∫—É–ø–∏—Ç—å –∫–æ—Ñ–µ –≤ –ê–ª–º–∞—Ç—ã', '–¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞':",
                reply_markup=get_nav_keyboard(STEP_SEO_KEYWORDS)
            )

        elif step == STEP_SEO_KEYWORDS:
            doc_ref.update({
                "seo_keywords": text,
                "step": STEP_COMPETITORS
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 11: –ö—Ç–æ –≤–∞—à–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã?\n"
                "–£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤:",
                reply_markup=get_nav_keyboard(STEP_COMPETITORS)
            )

        elif step == STEP_COMPETITORS:
            doc_ref.update({
                "competitors": text,
                "step": STEP_PRODUCT_PROBLEM
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 12: –ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç?\n"
                "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=get_nav_keyboard(STEP_PRODUCT_PROBLEM)
            )

        elif step == STEP_PRODUCT_PROBLEM:
            doc_ref.update({
                "product_problem": text,
                "step": STEP_SITE_GOALS
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 13: –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å —Å–∞–π—Ç?",
                reply_markup=get_goals_keyboard()
            )

        elif step == "custom_goal":
            doc_ref.update({
                "site_goal": f"–î—Ä—É–≥–æ–µ: {text}",
                "step": STEP_SITE_STYLE
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 14: –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å —Å–∞–π—Ç–∞?\n"
                "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=get_nav_keyboard(STEP_SITE_STYLE)
            )

        elif step == STEP_SITE_STYLE:
            doc_ref.update({
                "site_style": text,
                "step": STEP_SITE_STRUCTURE
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 15: –ö–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ?\n"
                "–û–ø–∏—à–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:",
                reply_markup=get_nav_keyboard(STEP_SITE_STRUCTURE)
            )

        elif step == STEP_SITE_STRUCTURE:
            doc_ref.update({
                "site_structure": text,
                "step": STEP_EXTRA_INFO
            })
            await update.message.reply_text(
                "üîπ –®–∞–≥ 16: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                "–ß—Ç–æ –µ—â—ë –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å?",
                reply_markup=get_nav_keyboard(STEP_EXTRA_INFO)
            )

        elif step == STEP_EXTRA_INFO:
            doc_ref.update({
                "extra_info": text,
                "step": STEP_CONTACT
            })
            await update.message.reply_text(
                "üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):",
                reply_markup=ReplyKeyboardRemove()
            )

        elif step == STEP_CONTACT:
            if not is_valid_contact(text):
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.")
                return

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –±—Ä–∏—Ñ–∞
            counter_ref = DB.collection("counters").document("brief_counter")
            counter = counter_ref.get()
            if counter.exists:
                num = counter.to_dict().get("value", 0) + 1
            else:
                num = 1
            counter_ref.set({"value": num})
            brief_number = f"BRF-{num:03d}"

            doc_ref.update({"contact": text, "brief_number": brief_number})

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±—Ä–∏—Ñ
            features_list = ", ".join([FEATURES_MAP[key] for key in data.get("features", [])]) or "‚Äî"

            final_brief = (
                f"üìã *–í–∞—à –±—Ä–∏—Ñ* `{brief_number}`\n\n"
                f"üåê –¢–∏–ø —Å–∞–π—Ç–∞: {data.get('type', '‚Äî')}\n"
                f"üõ† –î–≤–∏–∂–æ–∫: {data.get('engine', '‚Äî')}\n"
                f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {features_list}\n"
                f"üìÖ –°—Ä–æ–∫–∏: {data.get('timeline', '‚Äî')}\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget', '‚Äî')}\n\n"
                f"üéØ –ù–∏—à–∞: {data.get('business_niche', '‚Äî')}\n"
                f"üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏: {data.get('company_info', '‚Äî')}\n"
                f"üé® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ: {data.get('inspiration', '‚Äî')}\n"
                f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {data.get('materials', '‚Äî')}\n"
                f"üîç SEO: {data.get('seo_keywords', '‚Äî')}\n"
                f"‚öîÔ∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: {data.get('competitors', '‚Äî')}\n"
                f"üí° –ü—Ä–æ–±–ª–µ–º–∞: {data.get('product_problem', '‚Äî')}\n"
                f"üéØ –¶–µ–ª—å —Å–∞–π—Ç–∞: {data.get('site_goal', '‚Äî')}\n"
                f"üé® –°—Ç–∏–ª—å: {data.get('site_style', '‚Äî')}\n"
                f"üóÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {data.get('site_structure', '‚Äî')}\n"
                f"üìå –î–æ–ø. –∏–Ω—Ñ–æ: {data.get('extra_info', '‚Äî')}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {text}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            try:
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=final_brief,
                    parse_mode="Markdown"
                )
                print(f"[INFO] ‚úÖ –ë—Ä–∏—Ñ {brief_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
            except Exception as e:
                print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏—Ç–æ–≥ + –∫–Ω–æ–ø–∫–∞
            await update.message.reply_text(
                final_brief + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –±—Ä–∏—Ñ.\n"
                "–°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode="Markdown",
                reply_markup=get_new_brief_button()
            )

            # –û—á–∏—Å—Ç–∫–∞
            doc_ref.delete()

    except Exception as e:
        print(f"[ERROR] text_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# === –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
def is_valid_contact(text: str) -> bool:
    text = text.strip()
    import re
    email = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    phone = r'^\+?[\d\s\-\(\)]{7,}$'
    return re.match(email, text) or re.match(phone, text)