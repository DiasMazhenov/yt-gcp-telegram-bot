import asyncio
import os
import re
from google.cloud import firestore

from functions_framework import http
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
DB = firestore.Client()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OWNER_ID = int(os.environ.get("OWNER_ID"))  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID
# OWNER_USERNAME = "diasmazhenov"  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
def is_valid_contact(text: str) -> bool:
    email = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    phone = r'^\+?[\d\s\-\(\)]{7,}$'
    return re.match(email, text.strip()) or re.match(phone, text.strip())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_type_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–∏–∑–∏—Ç–∫–∞", callback_data="step1:–í–∏–∑–∏—Ç–∫–∞")],
        [InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥", callback_data="step1:–õ–µ–Ω–¥–∏–Ω–≥")],
        [InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data="step1:–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω")],
        [InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", callback_data="step1:–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç")],
    ])

def get_features_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", callback_data="step2:–ß–∞—Ç-–±–æ—Ç")],
        [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞", callback_data="step2:–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="step2:–ê–¥–º–∏–Ω–∫–∞")],
        [InlineKeyboardButton("–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="step2:–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
        [InlineKeyboardButton("–ù–µ—Ç –Ω–∏—á–µ–≥–æ", callback_data="step2:–ù–µ—Ç")],
    ])

def get_timeline_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—Ä–æ—á–Ω–æ (1‚Äì2 –Ω–µ–¥–µ–ª–∏)", callback_data="step3:–°—Ä–æ—á–Ω–æ")],
        [InlineKeyboardButton("1‚Äì2 –º–µ—Å—è—Ü–∞", callback_data="step3:1-2 –º–µ—Å—è—Ü–∞")],
        [InlineKeyboardButton("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", callback_data="step3:–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")],
    ])

def get_budget_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 1000$", callback_data="step4:–î–æ 1000$")],
        [InlineKeyboardButton("1000‚Äì3000$", callback_data="step4:1000‚Äì3000$")],
        [InlineKeyboardButton("3000‚Äì7000$", callback_data="step4:3000‚Äì7000$")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 7000$", callback_data="step4:–ë–æ–ª–µ–µ 7000$")],
    ])


@http
def telegram_bot(request):
    return asyncio.run(handle_request(request))


async def handle_request(request):
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        print("ERROR: TELEGRAM_BOT_TOKEN not set")
        return "No token", 500

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, contact_handler))

    if request.method == "GET":
        webhook_url = f"https://{request.host}/telegram_bot"
        await app.bot.set_webhook(webhook_url)
        return "Webhook set", 200

    if not request.is_json:
        return "Bad Request", 400

    update = Update.de_json(request.get_json(), app.bot)
    async with app:
        await app.process_update(update)

    return "OK", 200


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    doc_ref = DB.collection("users").document(str(user_id))

    try:
        if doc_ref.get().exists:
            doc_ref.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ", callback_data="start_brief")]
    ])
    await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    doc_ref = DB.collection("users").document(str(user_id))

    data = query.data

    try:
        if data == "start_brief":
            await query.edit_message_text("üîπ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:")
            await query.edit_message_reply_markup(reply_markup=get_type_keyboard())

        elif data.startswith("step1:"):
            type_ = data.split(":", 1)[1]
            doc_ref.set({"type": type_})
            await query.edit_message_text("üîπ –®–∞–≥ 2: –ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã?")
            await query.edit_message_reply_markup(reply_markup=get_features_keyboard())

        elif data.startswith("step2:"):
            features = data.split(":", 1)[1]
            doc_ref.update({"features": features})
            await query.edit_message_text("üîπ –®–∞–≥ 3: –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?")
            await query.edit_message_reply_markup(reply_markup=get_timeline_keyboard())

        elif data.startswith("step3:"):
            timeline = data.split(":", 1)[1]
            doc_ref.update({"timeline": timeline})
            await query.edit_message_text("üîπ –®–∞–≥ 4: –í–∞—à –±—é–¥–∂–µ—Ç?")
            await query.edit_message_reply_markup(reply_markup=get_budget_keyboard())

        elif data.startswith("step4:"):
            budget = data.split(":", 1)[1]
            doc_ref.update({"budget": budget})
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text(
                "üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω), —á—Ç–æ–±—ã —è —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            doc_ref.update({"awaiting_contact": True})

    except Exception as e:
        print(f"[ERROR] button_handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    doc_ref = DB.collection("users").document(str(user_id))

    try:
        doc = doc_ref.get()
        if not doc.exists:
            await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        data = doc.to_dict()
        if not data.get("awaiting_contact"):
            await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        contact = update.message.text
        if not is_valid_contact(contact):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω."
            )
            return

        doc_ref.update({"contact": contact})

        brief = (
            "üì© *–ù–æ–≤—ã–π –±—Ä–∏—Ñ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
            f"üë§ –ò–º—è: {update.effective_user.full_name}\n"
            f"üÜî ID: {update.effective_user.id}\n"
            f"üîó @: @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üåê –¢–∏–ø —Å–∞–π—Ç–∞: {data.get('type', '‚Äî')}\n"
            f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {data.get('features', '‚Äî')}\n"
            f"üìÖ –°—Ä–æ–∫–∏: {data.get('timeline', '‚Äî')}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget', '‚Äî')}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
        )

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ ID
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=brief,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
            # –†–µ–∑–µ—Ä–≤: –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ username, –Ω–æ –ª—É—á—à–µ –Ω–µ –Ω–∞–¥–æ

        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –±—Ä–∏—Ñ.\n"
            "–°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )

        doc_ref.delete()

    except Exception as e:
        print(f"[ERROR] contact_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")