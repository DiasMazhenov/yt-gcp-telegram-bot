import asyncio
import os

from functions_framework import http
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_TYPE, SELECT_FEATURES, SELECT_TIMELINE, SELECT_BUDGET, ENTER_CONTACT = range(5)

# –¢–≤–æ–π Telegram username (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—é–¥–∞)
OWNER_USERNAME = "diasmazhenov"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
KEYBOARD_TYPE = ReplyKeyboardMarkup(
    [["–í–∏–∑–∏—Ç–∫–∞", "–õ–µ–Ω–¥–∏–Ω–≥"], ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"]],
    one_time_keyboard=True,
    resize_keyboard=True,
)

KEYBOARD_FEATURES = ReplyKeyboardMarkup(
    [
        ["–ß–∞—Ç-–±–æ—Ç", "–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞"],
        ["–ê–¥–º–∏–Ω–∫–∞", "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"],
        ["–ù–µ—Ç –Ω–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ"]
    ],
    one_time_keyboard=True,
    resize_keyboard=True,
)

KEYBOARD_TIMELINE = ReplyKeyboardMarkup(
    [["–°—Ä–æ—á–Ω–æ (1‚Äì2 –Ω–µ–¥–µ–ª–∏)", "1‚Äì2 –º–µ—Å—è—Ü–∞"], ["–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"]],
    one_time_keyboard=True,
    resize_keyboard=True,
)

KEYBOARD_BUDGET = ReplyKeyboardMarkup(
    [["–î–æ 1000$", "1000‚Äì3000$"], ["3000‚Äì7000$", "–ë–æ–ª–µ–µ 7000$"]],
    one_time_keyboard=True,
    resize_keyboard=True,
)

@http
def telegram_bot(request):
    return asyncio.run(handle_request(request))

async def handle_request(request):
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return "No token", 500

    app = Application.builder().token(token).build()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    app.add_handler(CommandHandler("start", start))
    
    # ConversationHandler –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –±—Ä–∏—Ñ–∞
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ)$"), start_brief)],
        states={
            SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_type)],
            SELECT_FEATURES: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_features)],
            SELECT_TIMELINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_timeline)],
            SELECT_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_budget)],
            ENTER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    if request.method == "GET":
        webhook_url = f"https://{request.host}/telegram_bot"
        await app.bot.set_webhook(webhook_url)
        return "Webhook set", 200

    if not request.is_json:
        return "Bad Request", 400

    update = Update.de_json(request.get_json(), app.bot)
    async with app:
        await app.process_update(update)

    return "OK", 200


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ"]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard,
    )


async def start_brief(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîπ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:",
        reply_markup=KEYBOARD_TYPE,
    )
    return SELECT_TYPE


async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['type'] = update.message.text
    await update.message.reply_text(
        "üîπ –®–∞–≥ 2: –ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã?",
        reply_markup=KEYBOARD_FEATURES,
    )
    return SELECT_FEATURES


async def select_features(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['features'] = update.message.text
    await update.message.reply_text(
        "üîπ –®–∞–≥ 3: –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?",
        reply_markup=KEYBOARD_TIMELINE,
    )
    return SELECT_TIMELINE


async def select_timeline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['timeline'] = update.message.text
    await update.message.reply_text(
        "üîπ –®–∞–≥ 4: –í–∞—à –±—é–¥–∂–µ—Ç?",
        reply_markup=KEYBOARD_BUDGET,
    )
    return SELECT_BUDGET


async def select_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['budget'] = update.message.text
    await update.message.reply_text(
        "üîπ –®–∞–≥ 5: –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω), —á—Ç–æ–±—ã —è —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ENTER_CONTACT


async def enter_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    brief = (
        "üì© *–ù–æ–≤—ã–π –±—Ä–∏—Ñ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
        f"üë§ –ò–º—è: {update.effective_user.full_name}\n"
        f"üÜî ID: {update.effective_user.id}\n"
        f"üîó @: @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üåê –¢–∏–ø —Å–∞–π—Ç–∞: {context.user_data['type']}\n"
        f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {context.user_data['features']}\n"
        f"üìÖ –°—Ä–æ–∫–∏: {context.user_data['timeline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–±–µ –≤ –ª–∏—á–∫—É
    try:
        owner = await context.bot.get_chat(f"@{OWNER_USERNAME}")
        await context.bot.send_message(
            chat_id=owner.id,
            text=brief,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –≤—Ä—É—á–Ω—É—é
        # await context.bot.send_message(chat_id=123456789, text=brief)

    # –ö–ª–∏–µ–Ω—Ç—É ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –±—Ä–∏—Ñ.\n"
        "–°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END